pdata = read.csv("participants.csv")
head(pdata)
library(caret); library(kernlab); data(spam)
intrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training = spam[intrain]
dim(training)
testing = spam[-intrain,]
dim(testing)
dim(training)
training = spam[intrain,]
dim(training)
participants = read.csv("participants.csv")
sequences = read.csv("sequences.csv")
mdata = merge(participants, sequences)
intrain = mdata[intrain,]
intrain <- createDataPartition(y=mdata$fingerprint, p=0.75, list=FALSE)
training = mdata[intrain,]
testing = mdata[-intrain,]
dim(training)
dim(testing)
modelfit <- train(fingerprint ~. data=training, method="glm")
modelfit <- train(fingerprint ~., data=training, method="glm")
intrain <- createDataPartition(y=mdata$sex, p=0.75, list=FALSE)
testing = mdata[-intrain,]
modelfit <- train(sex ~., data=training, method="glm")
modelfit <- train(sex ~., data=training, method="mtry")
head(training)
head(training, 20)
head(training, 1, 20)
head(training, 1, 5)
head(training, 1, 100)
head(training, 1, 1)
head(training, 1:5)
head(training, 1)
head(training, 50)
head(training, 150)
head(training, 150)[4]
head(training, 150)[5]
head(training, 150)[1[
head(training, 150)[1]
head(training, 150)[2]
head(training, 150)
head(training)
head(training)[1]
head(training, 1000)[7]
head(training)
head(training, 5000)[7] 
intrain <- createDataPartition(y=mdata$superpower, p=0.75, list=FALSE)
training = mdata[intrain,]
testing = mdata[-intrain,]
modelfit <- train(superpower ~., data=training, method="mtry")
head(training)
mdata$referrer <- NULL
sequences = read.csv("sequences.csv")
participants = read.csv("participants.csv")
mdata = merge(participants, sequences)
dim(mdata)
head(mdata)
training = mdata[intrain,]
testing = mdata[-intrain,]
modelfit <- train(superpower ~., data=training, method="mtry")
library(caret)
modelfit <- train(superpower ~., data=training, method="mtry")
library(caret)
kequences = read.csv("kequences.csv")
participants = read.csv("participants.csv")
mdata = merge(participants, sequences)
mdata = merge(participants, kequences)
dim(mdata)
intrain <- createDataPartition(y=mdata$superpower, p=0.75, list=FALSE)
training <- mdata[intrain,]
testing <- mdata[-intrain,]
modelfit <- train(superpower ~., data=training, method="mtry")
train
help(train)
modelLookup
modelLookup()
modelLookup(mtry)
modelLookup("mtry")
modelLookup("Boruta")
modelfit <- train(superpower ~., data=training, method="Boruta")
modelfit <- train(superpower ~., data=training, method="Boruta")
modelfit <- train(superpower ~., data=training, method="glm")
modelfit <- train(superpower ~., data=training, method="Boruta")
warnings()
head(mdata)
participants = read.csv("participants.csv")
sequences = read.csv("sequences.csv")
participants = read.csv("participants.csv")
sequences = read.csv("sequences.csv")
head(mdata[2,])
head(participants[2,])
head(participants[,2])
head(participants[,4])
head(sequences[7,13])
head(sequences[7,])
head(sequences)
head(sequences[1,])
head(participants[,4])
head(participants[1,4])
head(participants[,1:4])
head(participants[,"fingerprint":"handedness"])
head(participants[c("fingerprint":"handedness")])
head(participants[c("fingerprint","handedness")])
head(sequences[3])
head(sequences[1,3])
head(sequences[1])
head(sequences[1:2])
head(sequences[1:3])
head(sequences[13])
head(sequences[1 3])
head(sequences[,3])
head(sequences[,3:5])
head(sequences[,c(3, 5:8)])
head(sequences[,c(3, 6:8)])
head(sequences[, c(1, 6:)])
#head(sequences[, c(1, 6:)])
dim(sequences)
#head(sequences[, c(1, 6:12)])
head(sequences[, c(1, 6:12)])
trimseq = sequences[, c(1, 6:12)]
trimpart = participants[c("fingerprint","handedness")]
head(sequences[, c(1, 6:12)])
head(sequences[c(1, 6:12)])
head(trimseq)
head(trimpart)
mdata = merge(trimpart, trimseq)
head(mdata)
#modelfit <- train(mdata[c(3:method="Boruta")
dim(mdata)
#modelfit <- train(mdata[c(3:9)], mdata[2], method="Boruta")
head(mdata[2])
modelfit <- train(mdata[c(3:9)], mdata[2], method="Boruta")
library(caret)
modelfit <- train(head(mdata[c(3:9)]), head(mdata[2]), method="Boruta")
modelfit <- train(head(mdata[c(3:9)], 200), head(mdata[2], 200), method="Boruta")
help(train)
head(mdata[2])
head(mdata[,2])
modelfit <- train(head(mdata[,3:9], 200), head(mdata[,2], 200), method="Boruta")
warnings()
modelfit <- train(head(mdata[,3:9], 2000), head(mdata[,2], 2000), method="Boruta")
modelfit
modelfit <- train(head(mdata[,3:9], 2000), head(mdata[,2], 2000), method="Boruta", allowParallel=TRUE)
modelfit
save(modelfit, "handedness-predictor.Rdata")
help(save)
save(modelfit, file="handedness-predictor.Rdata")
save.image()
sequences = read.csv("sequences.csv")
participants = read.csv("participants.csv")
dim(sequences)
load("handedness-predictor.Rdata")
modelfit$method
dim(modelfit$trainingData)
sequences[1]
sequences[1,]
head(modelfit$trainingData)
dim(sequences)
head(sequences[,6:12])
help(predict)
help(predict)
load(caret)
library(caret)
help(predict)
predict(modelfit, newdata=head(sequences[,6:12]))
head(participants)
head(sequences)
trimpart = participants[c("fingerprint","handedness")]
trimseq = sequences[, c(1, 6:12)]
intest <- createDataPartition(y=mdata$handedness, p=0.80, list=FALSE)
testdata = mdata[intest,]
head(testdata)
help(createFolds)
set.seed(19181)
intest <- createDataPartition(y=mdata$handedness, p=0.80, list=FALSE)
testdata = mdata[intest,]
head(testdata)
help(createFolds)
folds <- createFolds(y=mdata$handedness, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds, length)
dim(mdata)
head(folds)
head(mdata)
mdata[2345,]
#predict(modelfit, newdata=mdata[2345,
dim(mdata)
mdata[2345,3:9]
predict(modelfit, newdata=mdata[2345,3:9])
mdata[245,3:9]
predict(modelfit, newdata=mdata[245,3:9])
mdata[245,]
mdata[145,]
predict(modelfit, newdata=mdata[145,3:9])
outcomes <- predict(modelfit, newdata=mdata[1:100,3:9])
dim(outcomes)
head(outcomes)
outcomes
head(mdata[2,], 100)
head(mdata[2], 100)
halp(predict)
help(predict)
methods(predict)
help(predict)
outcomes <- predict(modelfit, newdata=mdata[1:100,3:9], type="prob")
outcomes
head(participants)
head(sequences)
trimpart = participants[c("fingerprint","military")]
mdata = merge(trimpart, trimseq)
intrain <- createDataPartition(y=mdata$military, p=0.60, list=FALSE)
training <- mdata[intrain,]
testing <- mdata[-intrain,]
library(doMC)
registerDoMC(8)
#modelfit <- train(mdata[,3:9], 2000), head(mdata[,2], 2000), method="Boruta", allowParallel=TRUE)
head(training[,3:9])
head(training[,2])
head(training)
nrow(training)
nrow(testing)
tr1 = training[sample(nrow(training)),]
head(tr1)
md1 = mdata[sample(nrow(mdata)),]
intrain <- createDataPartition(y=mdata$military, p=0.60, list=FALSE)
training <- mdata[intrain,]
testing <- mdata[-intrain,]
head(training)
intrain <- createDataPartition(y=md1$military, p=0.60, list=FALSE)
training <- mdata[intrain,]
testing <- mdata[-intrain,]
head(training)
training <- md1[intrain,]
training <- md1[intrain,]
head(training)
dim(training)
help(sample)
head(training, 20)
head(training, 200)
training[,2]
testing[,2]
training <- md1[intrain,]
testing <- md1[-intrain,]
testing[,2]
training[,2]
md1[2,]
md1[,2]
training[,1]
##modelfit <- train(x=training[,3:9], y=training[,2], method="Boruta", allowParallel=TRUE)
registerDoMC(8)
head(training[,3:9])
head(training[,3,9])
head(training[,3 9])
head(training[,3])
head(training[,(3,9)])
head(training[,c(3,9)])
head(training[,c(3,6)])
help(featurePlot)
featurePlot(x=training[,c("starttime", "endtime")], y=training$military)
featurePlot(x=training[,c("starttime", "endtime")], y=training$military)
str(training)
md1$startenddiff <- md1$endtime - md1$starttime
head(md1)
training <- md1[intrain,]
featurePlot(x=training[,c("starttime", "endtime", "startenddiff")], y=training$military)
head(training)
featurePlot(x=training[,c("starttime", "endtime")], y=training$military)
featurePlot(x=training[,startenddiff], y=training$military)
featurePlot(x=training[,"startenddiff"], y=training$military)
featurePlot(x=training[,"startenddiff"], y=training$military, type
#featurePlot(x=training[,"startenddiff"], y=training$military, type
help(featurePlot)
#featurePlot(x=training[,"startenddiff"], y=training$military, plot="scatter")
featurePlot(x=training[,"startenddiff"], y=training$military, plot="scatter")
featurePlot(x=training[,"startenddiff"], y=training$military)
featurePlot(x=training[,"startenddiff"], y=training$military, plot="scatter")
training[,c("military", "startenddiff")]
md1$endlastdiff <- md1$endtime - md1$lastchartime
training <- md1[intrain,]
head(training)
featurePlot(x=training[,"endlastdiff"], y=training$military)
#featurePlot(x=training[,3:], y=training$military)
dim(training)
featurePlot(x=training[,3:11], y=training$military)
help(featurePlot)
featurePlot(x=training[,3:11], y=training$military)
featurePlot(x=training[,"endlastdiff"], y=training$military)
scaledtraining = preProcess(training, method=c("center", "scale"))
head(training)
scaledtraining = preProcess(training[c(-1, -2)], method=c("center", "scale"))
head(scaledtraining)
scaledtraining
testing$endlastdiff <- (training$endlastdiff - mean(training$endlastdiff))/sd(training$endlastdiff)
training$starttime <- (training$starttime - mean(training$starttime))/sd(training$starttime)
training$firstchartime <- (training$firstchartime - mean(training$firstchartime))/sd(training$firstchartime)
training$lastchartime <- (training$lastchartime - mean(training$lastchartime))/sd(training$lastchartime)
training$endtime <- (training$endtime - mean(training$endtime))/sd(training$endtime)
training$maxtimebetweenchars <- (training$maxtimebetweenchars - mean(training$maxtimebetweenchars))/sd(training$maxtimebetweenchars)
training$mintimebetweenchars <- (training$mintimebetweenchars - mean(training$mintimebetweenchars))/sd(training$mintimebetweenchars)
training$avgtimebetweenchars <- (training$avgtimebetweenchars - mean(training$avgtimebetweenchars))/sd(training$avgtimebetweenchars)
training$startenddiff <- (training$startenddiff - mean(training$startenddiff))/sd(training$startenddiff)
head(training)
k
featurePlot(x=training[,"endlastdiff"], y=training$military)
featurePlot(x=training[,3:11], y=training$military)
##modelfit <- train(x=training[,3:11], y=training$military, method="Boruta", allowParallel=TRUE)
registerDoMC(8)
modelfit <- train(x=training[,3:11], y=training$military, method="Boruta", allowParallel=TRUE)
modelfit
head(testing)
head(training)
testing$starttime <- (testing$starttime - mean(testing$starttime))/sd(testing$starttime)
testing$firstchartime <- (testing$firstchartime - mean(testing$firstchartime))/sd(testing$firstchartime)
testing$lastchartime <- (testing$lastchartime - mean(testing$lastchartime))/sd(testing$lastchartime)
testing$endtime <- (testing$endtime - mean(testing$endtime))/sd(testing$endtime)
testing$maxtimebetweenchars <- (testing$maxtimebetweenchars - mean(testing$maxtimebetweenchars))/sd(testing$maxtimebetweenchars)
testing$mintimebetweenchars <- (testing$mintimebetweenchars - mean(testing$mintimebetweenchars))/sd(testing$mintimebetweenchars)
testing$avgtimebetweenchars <- (testing$avgtimebetweenchars - mean(testing$avgtimebetweenchars))/sd(testing$avgtimebetweenchars)
testing$startenddiff <- (testing$startenddiff - mean(testing$startenddiff))/sd(testing$startenddiff)
testing$startenddiff <- testing$endtime - testing$starttime
testing$endlastdiff <- testing$endtime - testing$lastchartime
head(training)
head(testing)
head(md1)
head(training)
head(testing)
#results = predict(
help(predict)
results = predict(modelfit, newdata=testing)
head(results)
head(testing)
results
modelfit
help(sample)
help(sample)
help(sample)
predictors(modelfit)
help(predictors)
modelfit$finalModel
predictors(modelfit$finalModel)
results = predict(modelfit$finalmodel, newdata=testing)
results = predict(modelfit$finalModel, newdata=testing)
results
results = predict(modelfit$finalModel, newdata=testing, type="prob")
results
head(testing)
testing <- md1[-intrain,]
head(testing)
results = predict(modelfit$finalModel, newdata=testing, type="prob")
head(results)
results
head(md1)
#modelfit <- train(x=md1[,3:11], y=md1$military, method="Boruta", allowParallel=TRUE)
modelfit
modelfit$times
1091/60/60
1091/60
dim(md1)
intrain <- createDataPartition(y=md1$military, p=0.60, list=FALSE)
training <- md1[intrain,]
testing <- md1[-intrain,]
head(training)
training
training[,2]
testing[,2]
modelfit <- train(x=training[,3:11], y=training$military, method="Boruta", allowParallel=TRUE)
results = predict(modelfit$finalModel, newdata=testing)
results
dim(results)
nrows(results)
nrow(resutls)
nrow(results)
ncol(results)
type(results)
results
modelfit$finalModel
modelfit$times
modelfit$pred
predictors(modelfit$finalModel)
modelfit$results
modelfit$modelInfo
modelfit$results
library(doMC)
library(randomForest)
